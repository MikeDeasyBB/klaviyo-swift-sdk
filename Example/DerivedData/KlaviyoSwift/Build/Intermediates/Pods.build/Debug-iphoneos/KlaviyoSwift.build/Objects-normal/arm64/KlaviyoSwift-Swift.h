// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import SystemConfiguration;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSDictionary;
@class NSDate;
@class NSData;

SWIFT_CLASS("_TtC12KlaviyoSwift7Klaviyo")
@interface Klaviyo : NSObject
+ (Klaviyo * _Nonnull)sharedInstance;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLEventTrackPurchasePlatform;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonReceivedPush;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonOpenedPush;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLMessageDimension;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonEmailDictKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonFirstNameDictKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonLastNameDictKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonPhoneNumberDictKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonTitleDictKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonOrganizationDictKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonCityDictKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonRegionDictKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonCountryDictKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull KLPersonZipDictKey;

/// setupWithPublicAPIKey: sets up the Klaviyo iOS SDK for use in the application. Should be called once upon initial application setup in the AppDelegate didFinishLaunchingWithOptions: Requires an account ID, which can be accessed through Klaviyo.com.
///
/// \param apiKey string representation of the Klaviyo API Key
+ (void)setupWithPublicAPIKey:(NSString * _Nonnull)apiKey;

/// setUpUserEmail: Register the current user's email address with Klaivyo. This can also be done via passing a dictionary containing a user's email to trackEvent.
///
/// \param userEmail the user's email address
- (void)setUpUserEmail:(NSString * _Nonnull)userEmail;
- (void)setUpCustomerID:(NSString * _Nonnull)id;

/// handlePush: Extracts tracking information from received push notification and sends the data to Klaviyo for push-tracking analystics.
///
/// \param userInfo NSDictionary containing the push notification text & metadata
- (void)handlePush:(NSDictionary * _Nonnull)userInfo;

/// trackEvent: KL Event tracking for event name only
///
/// \param eventName name of the event
- (void)trackEvent:(NSString * _Nullable)eventName;

/// trackEvent: KL Event tracking for event name and customer properties
///
/// \param eventName name of the event
///
/// \param properties customerProperties
- (void)trackEvent:(NSString * _Nullable)eventName properties:(NSDictionary * _Nullable)properties;

/// trackEvent: KL Event tracking for event name, customer & event properties
///
/// \param eventName name of the event
///
/// \param customerPropertiesDict dictionary for user info
///
/// \param properties dictionary for event info
- (void)trackEvent:(NSString * _Nullable)eventName customerProperties:(NSDictionary * _Nullable)customerProperties properties:(NSDictionary * _Nullable)properties;

/// trackEvent: KL Event tracking using all possible parameters
///
/// \param eventName name of the event
///
/// \param customerPropertiesDict dictionary for user info
///
/// \param propertiesDict dictionary for event info
///
/// \param eventDate date of the event
- (void)trackEvent:(NSString * _Nullable)event customerProperties:(NSDictionary * _Nullable)customerProperties propertiesDict:(NSDictionary * _Nullable)propertiesDict eventDate:(NSDate * _Nullable)eventDate;

/// trackPersonWithInfo: method that creates a Klaviyo person tracking instance that is separate from an event
///
/// \param personInfoDictionary dictionary of user attributes that you wish to track. These can be special properties provided by Klaviyo, such as KLPersonFirstNameDictKey, or created by the user on the fly.
///
/// \returns  Void
- (void)trackPersonWithInfo:(NSDictionary * _Nonnull)personDictionary;

/// addPushDeviceToken: Registers Klaviyo with Apple Push Notifications (APN) Private function creates a unique identifier for the device and uses it to track the event
///
/// \param deviceToken token provided by Apple that registers push notifications to the given device
///
/// \returns  Void
- (void)addPushDeviceToken:(NSData * _Nonnull)deviceToken;
@end

@class NSNotificationCenter;

SWIFT_CLASS("_TtC12KlaviyoSwift12Reachability")
@interface Reachability : NSObject
@property (nonatomic, copy) void (^ _Nullable whenReachable)(Reachability * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable whenUnreachable)(Reachability * _Nonnull);
@property (nonatomic) BOOL reachableOnWWAN;
@property (nonatomic, strong) NSNotificationCenter * _Nonnull notificationCenter;
@property (nonatomic, readonly, copy) NSString * _Nonnull currentReachabilityString;
- (nullable instancetype)initWithReachabilityRef:(SCNetworkReachabilityRef _Nullable)reachabilityRef OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithHostname:(NSString * _Nonnull)hostname;
+ (Reachability * _Nullable)reachabilityForInternetConnection;
+ (Reachability * _Nullable)reachabilityForLocalWiFi;
- (BOOL)startNotifier;
- (void)stopNotifier;
- (BOOL)isReachable;
- (BOOL)isReachableViaWWAN;
- (BOOL)isReachableViaWiFi;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface UIColor (SWIFT_EXTENSION(KlaviyoSwift))
@end

#pragma clang diagnostic pop
